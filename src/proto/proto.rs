// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:WireMessage)
pub struct WireMessage {
    // message fields
    // @@protoc_insertion_point(field:WireMessage.to)
    pub to: ::protobuf::MessageField<ProcessId>,
    // @@protoc_insertion_point(field:WireMessage.message)
    pub message: ::protobuf::MessageField<Message>,
    // special fields
    // @@protoc_insertion_point(special_field:WireMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WireMessage {
    fn default() -> &'a WireMessage {
        <WireMessage as ::protobuf::Message>::default_instance()
    }
}

impl WireMessage {
    pub fn new() -> WireMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProcessId>(
            "to",
            |m: &WireMessage| { &m.to },
            |m: &mut WireMessage| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Message>(
            "message",
            |m: &WireMessage| { &m.message },
            |m: &mut WireMessage| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WireMessage>(
            "WireMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WireMessage {
    const NAME: &'static str = "WireMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.to)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.message)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.to.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.to.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.message.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WireMessage {
        WireMessage::new()
    }

    fn clear(&mut self) {
        self.to.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WireMessage {
        static instance: WireMessage = WireMessage {
            to: ::protobuf::MessageField::none(),
            message: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WireMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WireMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WireMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WireMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Message)
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:Message.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:Message.process)
    pub process: ::protobuf::MessageField<ProcessId>,
    // @@protoc_insertion_point(field:Message.ballot)
    pub ballot: ::protobuf::MessageField<BallotNumber>,
    // @@protoc_insertion_point(field:Message.slot)
    pub slot: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:Message.command)
    pub command: ::protobuf::MessageField<Command>,
    // @@protoc_insertion_point(field:Message.accepted)
    pub accepted: ::std::collections::HashMap<u64, PValue>,
    // special fields
    // @@protoc_insertion_point(special_field:Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Message| { &m.type_ },
            |m: &mut Message| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProcessId>(
            "process",
            |m: &Message| { &m.process },
            |m: &mut Message| { &mut m.process },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BallotNumber>(
            "ballot",
            |m: &Message| { &m.ballot },
            |m: &mut Message| { &mut m.ballot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "slot",
            |m: &Message| { &m.slot },
            |m: &mut Message| { &mut m.slot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Command>(
            "command",
            |m: &Message| { &m.command },
            |m: &mut Message| { &mut m.command },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "accepted",
            |m: &Message| { &m.accepted },
            |m: &mut Message| { &mut m.accepted },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.process)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ballot)?;
                },
                32 => {
                    self.slot = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.command)?;
                },
                50 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_uint64()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.accepted.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::P1A) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if let Some(v) = self.process.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ballot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.slot {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.command.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.accepted {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::P1A) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.process.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.ballot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.slot {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.command.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        for (k, v) in &self.accepted {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::uint64_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(50)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_uint64(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::P1A);
        self.process.clear();
        self.ballot.clear();
        self.slot = ::std::option::Option::None;
        self.command.clear();
        self.accepted.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::Lazy<Message> = ::protobuf::rt::Lazy::new();
        instance.get(Message::new)
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ProcessId)
pub struct ProcessId {
    // message fields
    // @@protoc_insertion_point(field:ProcessId.port)
    pub port: u32,
    // @@protoc_insertion_point(field:ProcessId.id)
    pub id: u32,
    // message oneof groups
    pub ip: ::std::option::Option<process_id::Ip>,
    // special fields
    // @@protoc_insertion_point(special_field:ProcessId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProcessId {
    fn default() -> &'a ProcessId {
        <ProcessId as ::protobuf::Message>::default_instance()
    }
}

impl ProcessId {
    pub fn new() -> ProcessId {
        ::std::default::Default::default()
    }

    // fixed32 v4 = 1;

    pub fn v4(&self) -> u32 {
        match self.ip {
            ::std::option::Option::Some(process_id::Ip::V4(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_v4(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_v4(&self) -> bool {
        match self.ip {
            ::std::option::Option::Some(process_id::Ip::V4(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v4(&mut self, v: u32) {
        self.ip = ::std::option::Option::Some(process_id::Ip::V4(v))
    }

    // string v6 = 2;

    pub fn v6(&self) -> &str {
        match self.ip {
            ::std::option::Option::Some(process_id::Ip::V6(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_v6(&mut self) {
        self.ip = ::std::option::Option::None;
    }

    pub fn has_v6(&self) -> bool {
        match self.ip {
            ::std::option::Option::Some(process_id::Ip::V6(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_v6(&mut self, v: ::std::string::String) {
        self.ip = ::std::option::Option::Some(process_id::Ip::V6(v))
    }

    // Mutable pointer to the field.
    pub fn mut_v6(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(process_id::Ip::V6(_)) = self.ip {
        } else {
            self.ip = ::std::option::Option::Some(process_id::Ip::V6(::std::string::String::new()));
        }
        match self.ip {
            ::std::option::Option::Some(process_id::Ip::V6(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_v6(&mut self) -> ::std::string::String {
        if self.has_v6() {
            match self.ip.take() {
                ::std::option::Option::Some(process_id::Ip::V6(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "v4",
            ProcessId::has_v4,
            ProcessId::v4,
            ProcessId::set_v4,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "v6",
            ProcessId::has_v6,
            ProcessId::v6,
            ProcessId::set_v6,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &ProcessId| { &m.port },
            |m: &mut ProcessId| { &mut m.port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ProcessId| { &m.id },
            |m: &mut ProcessId| { &mut m.id },
        ));
        oneofs.push(process_id::Ip::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProcessId>(
            "ProcessId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProcessId {
    const NAME: &'static str = "ProcessId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.ip = ::std::option::Option::Some(process_id::Ip::V4(is.read_fixed32()?));
                },
                18 => {
                    self.ip = ::std::option::Option::Some(process_id::Ip::V6(is.read_string()?));
                },
                24 => {
                    self.port = is.read_uint32()?;
                },
                32 => {
                    self.id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.port != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.port);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.id);
        }
        if let ::std::option::Option::Some(ref v) = self.ip {
            match v {
                &process_id::Ip::V4(v) => {
                    my_size += 1 + 4;
                },
                &process_id::Ip::V6(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.port != 0 {
            os.write_uint32(3, self.port)?;
        }
        if self.id != 0 {
            os.write_uint32(4, self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.ip {
            match v {
                &process_id::Ip::V4(v) => {
                    os.write_fixed32(1, v)?;
                },
                &process_id::Ip::V6(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProcessId {
        ProcessId::new()
    }

    fn clear(&mut self) {
        self.ip = ::std::option::Option::None;
        self.ip = ::std::option::Option::None;
        self.port = 0;
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProcessId {
        static instance: ProcessId = ProcessId {
            port: 0,
            id: 0,
            ip: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProcessId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProcessId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProcessId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcessId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ProcessId`
pub mod process_id {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ProcessId.ip)
    pub enum Ip {
        // @@protoc_insertion_point(oneof_field:ProcessId.v4)
        V4(u32),
        // @@protoc_insertion_point(oneof_field:ProcessId.v6)
        V6(::std::string::String),
    }

    impl ::protobuf::Oneof for Ip {
    }

    impl ::protobuf::OneofFull for Ip {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ProcessId as ::protobuf::MessageFull>::descriptor().oneof_by_name("ip").unwrap()).clone()
        }
    }

    impl Ip {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Ip>("ip")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BallotNumber)
pub struct BallotNumber {
    // message fields
    // @@protoc_insertion_point(field:BallotNumber.round)
    pub round: u64,
    // @@protoc_insertion_point(field:BallotNumber.process_id)
    pub process_id: ::protobuf::MessageField<ProcessId>,
    // special fields
    // @@protoc_insertion_point(special_field:BallotNumber.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BallotNumber {
    fn default() -> &'a BallotNumber {
        <BallotNumber as ::protobuf::Message>::default_instance()
    }
}

impl BallotNumber {
    pub fn new() -> BallotNumber {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round",
            |m: &BallotNumber| { &m.round },
            |m: &mut BallotNumber| { &mut m.round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProcessId>(
            "process_id",
            |m: &BallotNumber| { &m.process_id },
            |m: &mut BallotNumber| { &mut m.process_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BallotNumber>(
            "BallotNumber",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BallotNumber {
    const NAME: &'static str = "BallotNumber";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.round = is.read_uint64()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.process_id)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.round != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.round);
        }
        if let Some(v) = self.process_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.round != 0 {
            os.write_uint64(1, self.round)?;
        }
        if let Some(v) = self.process_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BallotNumber {
        BallotNumber::new()
    }

    fn clear(&mut self) {
        self.round = 0;
        self.process_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BallotNumber {
        static instance: BallotNumber = BallotNumber {
            round: 0,
            process_id: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BallotNumber {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BallotNumber").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BallotNumber {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BallotNumber {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Command)
pub struct Command {
    // message fields
    // @@protoc_insertion_point(field:Command.client)
    pub client: ::protobuf::MessageField<ProcessId>,
    // @@protoc_insertion_point(field:Command.req_id)
    pub req_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Command.operation)
    pub operation: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:Command.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProcessId>(
            "client",
            |m: &Command| { &m.client },
            |m: &mut Command| { &mut m.client },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "req_id",
            |m: &Command| { &m.req_id },
            |m: &mut Command| { &mut m.req_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation",
            |m: &Command| { &m.operation },
            |m: &mut Command| { &mut m.operation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Command>(
            "Command",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Command {
    const NAME: &'static str = "Command";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.client)?;
                },
                18 => {
                    self.req_id = is.read_bytes()?;
                },
                26 => {
                    self.operation = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.client.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.req_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.req_id);
        }
        if !self.operation.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.operation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.client.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.req_id.is_empty() {
            os.write_bytes(2, &self.req_id)?;
        }
        if !self.operation.is_empty() {
            os.write_bytes(3, &self.operation)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Command {
        Command::new()
    }

    fn clear(&mut self) {
        self.client.clear();
        self.req_id.clear();
        self.operation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Command {
        static instance: Command = Command {
            client: ::protobuf::MessageField::none(),
            req_id: ::std::vec::Vec::new(),
            operation: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Command {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Command").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PValue)
pub struct PValue {
    // message fields
    // @@protoc_insertion_point(field:PValue.ballot)
    pub ballot: ::protobuf::MessageField<BallotNumber>,
    // @@protoc_insertion_point(field:PValue.slot)
    pub slot: u64,
    // @@protoc_insertion_point(field:PValue.command)
    pub command: ::protobuf::MessageField<Command>,
    // special fields
    // @@protoc_insertion_point(special_field:PValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PValue {
    fn default() -> &'a PValue {
        <PValue as ::protobuf::Message>::default_instance()
    }
}

impl PValue {
    pub fn new() -> PValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BallotNumber>(
            "ballot",
            |m: &PValue| { &m.ballot },
            |m: &mut PValue| { &mut m.ballot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "slot",
            |m: &PValue| { &m.slot },
            |m: &mut PValue| { &mut m.slot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Command>(
            "command",
            |m: &PValue| { &m.command },
            |m: &mut PValue| { &mut m.command },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PValue>(
            "PValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PValue {
    const NAME: &'static str = "PValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ballot)?;
                },
                16 => {
                    self.slot = is.read_uint64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.command)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ballot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.slot != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.slot);
        }
        if let Some(v) = self.command.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ballot.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.slot != 0 {
            os.write_uint64(2, self.slot)?;
        }
        if let Some(v) = self.command.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PValue {
        PValue::new()
    }

    fn clear(&mut self) {
        self.ballot.clear();
        self.slot = 0;
        self.command.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PValue {
        static instance: PValue = PValue {
            ballot: ::protobuf::MessageField::none(),
            slot: 0,
            command: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:MessageType)
pub enum MessageType {
    // @@protoc_insertion_point(enum_value:MessageType.P1A)
    P1A = 0,
    // @@protoc_insertion_point(enum_value:MessageType.P1B)
    P1B = 1,
    // @@protoc_insertion_point(enum_value:MessageType.P2A)
    P2A = 2,
    // @@protoc_insertion_point(enum_value:MessageType.P2B)
    P2B = 3,
    // @@protoc_insertion_point(enum_value:MessageType.Preempt)
    Preempt = 4,
    // @@protoc_insertion_point(enum_value:MessageType.Adopt)
    Adopt = 5,
    // @@protoc_insertion_point(enum_value:MessageType.Decision)
    Decision = 6,
    // @@protoc_insertion_point(enum_value:MessageType.Request)
    Request = 7,
    // @@protoc_insertion_point(enum_value:MessageType.Propose)
    Propose = 8,
}

impl ::protobuf::Enum for MessageType {
    const NAME: &'static str = "MessageType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::P1A),
            1 => ::std::option::Option::Some(MessageType::P1B),
            2 => ::std::option::Option::Some(MessageType::P2A),
            3 => ::std::option::Option::Some(MessageType::P2B),
            4 => ::std::option::Option::Some(MessageType::Preempt),
            5 => ::std::option::Option::Some(MessageType::Adopt),
            6 => ::std::option::Option::Some(MessageType::Decision),
            7 => ::std::option::Option::Some(MessageType::Request),
            8 => ::std::option::Option::Some(MessageType::Propose),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MessageType] = &[
        MessageType::P1A,
        MessageType::P1B,
        MessageType::P2A,
        MessageType::P2B,
        MessageType::Preempt,
        MessageType::Adopt,
        MessageType::Decision,
        MessageType::Request,
        MessageType::Propose,
    ];
}

impl ::protobuf::EnumFull for MessageType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MessageType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MessageType {
    fn default() -> Self {
        MessageType::P1A
    }
}

impl MessageType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MessageType>("MessageType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bproto.proto\"M\n\x0bWireMessage\x12\x1a\n\x02to\x18\x01\x20\x01(\
    \x0b2\n.ProcessIdR\x02to\x12\"\n\x07message\x18\x02\x20\x01(\x0b2\x08.Me\
    ssageR\x07message\"\xd9\x02\n\x07Message\x12\x20\n\x04type\x18\x01\x20\
    \x01(\x0e2\x0c.MessageTypeR\x04type\x12$\n\x07process\x18\x02\x20\x01(\
    \x0b2\n.ProcessIdR\x07process\x12*\n\x06ballot\x18\x03\x20\x01(\x0b2\r.B\
    allotNumberH\0R\x06ballot\x88\x01\x01\x12\x17\n\x04slot\x18\x04\x20\x01(\
    \x04H\x01R\x04slot\x88\x01\x01\x12'\n\x07command\x18\x05\x20\x01(\x0b2\
    \x08.CommandH\x02R\x07command\x88\x01\x01\x122\n\x08accepted\x18\x06\x20\
    \x03(\x0b2\x16.Message.AcceptedEntryR\x08accepted\x1aD\n\rAcceptedEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\x04R\x03key\x12\x1d\n\x05value\x18\
    \x02\x20\x01(\x0b2\x07.PValueR\x05value:\x028\x01B\t\n\x07_ballotB\x07\n\
    \x05_slotB\n\n\x08_command\"Y\n\tProcessId\x12\x10\n\x02v4\x18\x01\x20\
    \x01(\x07H\0R\x02v4\x12\x10\n\x02v6\x18\x02\x20\x01(\tH\0R\x02v6\x12\x12\
    \n\x04port\x18\x03\x20\x01(\rR\x04port\x12\x0e\n\x02id\x18\x04\x20\x01(\
    \rR\x02idB\x04\n\x02ip\"O\n\x0cBallotNumber\x12\x14\n\x05round\x18\x01\
    \x20\x01(\x04R\x05round\x12)\n\nprocess_id\x18\x02\x20\x01(\x0b2\n.Proce\
    ssIdR\tprocessId\"b\n\x07Command\x12\"\n\x06client\x18\x01\x20\x01(\x0b2\
    \n.ProcessIdR\x06client\x12\x15\n\x06req_id\x18\x02\x20\x01(\x0cR\x05req\
    Id\x12\x1c\n\toperation\x18\x03\x20\x01(\x0cR\toperation\"g\n\x06PValue\
    \x12%\n\x06ballot\x18\x01\x20\x01(\x0b2\r.BallotNumberR\x06ballot\x12\
    \x12\n\x04slot\x18\x02\x20\x01(\x04R\x04slot\x12\"\n\x07command\x18\x03\
    \x20\x01(\x0b2\x08.CommandR\x07command*q\n\x0bMessageType\x12\x07\n\x03P\
    1A\x10\0\x12\x07\n\x03P1B\x10\x01\x12\x07\n\x03P2A\x10\x02\x12\x07\n\x03\
    P2B\x10\x03\x12\x0b\n\x07Preempt\x10\x04\x12\t\n\x05Adopt\x10\x05\x12\
    \x0c\n\x08Decision\x10\x06\x12\x0b\n\x07Request\x10\x07\x12\x0b\n\x07Pro\
    pose\x10\x08J\xbd\r\n\x06\x12\x04\0\04\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\n\n\x02\x05\0\x12\x04\x02\0\x0c\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x02\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\x03\x02\n\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03\x03\x02\x05\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x03\
    \x08\t\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x04\x02\n\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03\x04\x02\x05\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x04\
    \x08\t\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x05\x02\n\n\x0c\n\x05\x05\0\x02\
    \x02\x01\x12\x03\x05\x02\x05\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x05\
    \x08\t\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x06\x02\n\n\x0c\n\x05\x05\0\x02\
    \x03\x01\x12\x03\x06\x02\x05\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x06\
    \x08\t\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x07\x02\x0e\n\x0c\n\x05\x05\0\
    \x02\x04\x01\x12\x03\x07\x02\t\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x07\
    \x0c\r\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x08\x02\x0c\n\x0c\n\x05\x05\0\
    \x02\x05\x01\x12\x03\x08\x02\x07\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\
    \x08\n\x0b\n\x0b\n\x04\x05\0\x02\x06\x12\x03\t\x02\x0f\n\x0c\n\x05\x05\0\
    \x02\x06\x01\x12\x03\t\x02\n\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\t\r\
    \x0e\n\x0b\n\x04\x05\0\x02\x07\x12\x03\n\x02\x0e\n\x0c\n\x05\x05\0\x02\
    \x07\x01\x12\x03\n\x02\t\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\n\x0c\r\n\
    \x0b\n\x04\x05\0\x02\x08\x12\x03\x0b\x02\x0e\n\x0c\n\x05\x05\0\x02\x08\
    \x01\x12\x03\x0b\x02\t\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x0b\x0c\r\n\
    \n\n\x02\x04\0\x12\x04\x0e\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\x0e\x08\
    \x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x02\x13\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x0f\x02\x0b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x0c\x0e\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x11\x12\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x10\x02\x16\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x10\x02\t\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\n\x11\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x10\x14\x15\n\n\n\x02\x04\x01\x12\x04\x13\0\x1a\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03\x13\x08\x0f\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x14\x02\x17\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x14\x02\r\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x14\x0e\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x14\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x15\x02\x18\n\x0c\n\
    \x05\x04\x01\x02\x01\x06\x12\x03\x15\x02\x0b\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x15\x0c\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x15\x16\
    \x17\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x16\x02#\n\x0c\n\x05\x04\x01\
    \x02\x02\x04\x12\x03\x16\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\
    \x16\x0b\x17\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x16\x18\x1e\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03\x16!\"\n\x0b\n\x04\x04\x01\x02\x03\x12\
    \x03\x17\x02\x1b\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03\x17\x02\n\n\x0c\
    \n\x05\x04\x01\x02\x03\x05\x12\x03\x17\x0b\x11\n\x0c\n\x05\x04\x01\x02\
    \x03\x01\x12\x03\x17\x12\x16\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x17\
    \x19\x1a\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x18\x02\x1f\n\x0c\n\x05\x04\
    \x01\x02\x04\x04\x12\x03\x18\x02\n\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\
    \x03\x18\x0b\x12\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x18\x13\x1a\n\
    \x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x18\x1d\x1e\n\x0b\n\x04\x04\x01\
    \x02\x05\x12\x03\x19\x02#\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03\x19\
    \x02\x15\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x19\x16\x1e\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x03\x19!\"\n\n\n\x02\x04\x02\x12\x04\x1c\0#\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03\x1c\x08\x11\n\x0c\n\x04\x04\x02\x08\0\x12\
    \x04\x1d\x02\x20\x03\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03\x1d\x08\n\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x1e\x04\x13\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x1e\x04\x0b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1e\x0c\
    \x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1e\x11\x12\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x1f\x04\x12\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x1f\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1f\x0b\r\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03\x1f\x10\x11\n\x0b\n\x04\x04\x02\x02\x02\x12\
    \x03!\x02\x12\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03!\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03!\t\r\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03!\x10\x11\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\"\x02\x10\n\x0c\n\
    \x05\x04\x02\x02\x03\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03\"\t\x0b\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\"\x0e\x0f\n\
    \n\n\x02\x04\x03\x12\x04%\0(\x01\n\n\n\x03\x04\x03\x01\x12\x03%\x08\x14\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03&\x02\x13\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03&\t\x0e\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03&\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\
    \x12\x03'\x02\x1b\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03'\x02\x0b\n\x0c\
    \n\x05\x04\x03\x02\x01\x01\x12\x03'\x0c\x16\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03'\x19\x1a\n\n\n\x02\x04\x04\x12\x04*\0.\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03*\x08\x0f\n\x0b\n\x04\x04\x04\x02\0\x12\x03+\x02\x17\n\
    \x0c\n\x05\x04\x04\x02\0\x06\x12\x03+\x02\x0b\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03+\x0c\x12\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03+\x15\x16\n\
    \x0b\n\x04\x04\x04\x02\x01\x12\x03,\x02\x13\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03,\x02\x07\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03,\x08\x0e\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03,\x11\x12\n\x0b\n\x04\x04\x04\x02\
    \x02\x12\x03-\x02\x16\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03-\x02\x07\n\
    \x0c\n\x05\x04\x04\x02\x02\x01\x12\x03-\x08\x11\n\x0c\n\x05\x04\x04\x02\
    \x02\x03\x12\x03-\x14\x15\n\n\n\x02\x04\x05\x12\x040\04\x01\n\n\n\x03\
    \x04\x05\x01\x12\x030\x08\x0e\n\x0b\n\x04\x04\x05\x02\0\x12\x031\x02\x1a\
    \n\x0c\n\x05\x04\x05\x02\0\x06\x12\x031\x02\x0e\n\x0c\n\x05\x04\x05\x02\
    \0\x01\x12\x031\x0f\x15\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x031\x18\x19\n\
    \x0b\n\x04\x04\x05\x02\x01\x12\x032\x02\x12\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x032\t\r\n\x0c\
    \n\x05\x04\x05\x02\x01\x03\x12\x032\x10\x11\n\x0b\n\x04\x04\x05\x02\x02\
    \x12\x033\x02\x16\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x033\x02\t\n\x0c\n\
    \x05\x04\x05\x02\x02\x01\x12\x033\n\x11\n\x0c\n\x05\x04\x05\x02\x02\x03\
    \x12\x033\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(WireMessage::generated_message_descriptor_data());
            messages.push(Message::generated_message_descriptor_data());
            messages.push(ProcessId::generated_message_descriptor_data());
            messages.push(BallotNumber::generated_message_descriptor_data());
            messages.push(Command::generated_message_descriptor_data());
            messages.push(PValue::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MessageType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
